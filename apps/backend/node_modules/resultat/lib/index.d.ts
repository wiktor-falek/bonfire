export type ResultOk<T> = {
    val: T;
    ok: true;
    unwrap: () => T;
    unwrapOr: <TDefault>(defaultValue: TDefault) => T;
    unwrapOrElse: <TReturn>(cb: (err: string) => TReturn) => T;
};
export type ResultErr = {
    err: string;
    ok: false;
    unwrap: () => never;
    unwrapOr: <TDefault>(defaultValue: TDefault) => TDefault;
    unwrapOrElse: <TReturn>(cb: (err: string) => TReturn) => TReturn;
};
export type Result<T> = ResultOk<T> | ResultErr;
export declare function Ok<T>(value: T): ResultOk<T>;
export declare function Err(message: string): ResultErr;
